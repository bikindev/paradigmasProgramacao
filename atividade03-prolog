%questao 1a

aluno(joao, calculo).
aluno(maria, calculo).
aluno(joel, programacao).
aluno(joel, estrutura).
frequenta(joao, ufla).
frequenta(maria, ufla).
frequenta(joel, ufrj).
professor(carlos, calculo).
professor(ana_paula, estrutura).
professor(pedro, programacao).
funcionario(pedro, ufrj).
funcionario(ana_paula, ufla).
funcionario(carlos, ufla).

alunoDoProfessor(Prof, Aluno):- (   professor(Prof,Disc), aluno(Aluno,Disc)).

%questao 1b
pessoasAssociadasUniv(Universidade, Pessoa):- (   frequenta(Pessoa,Universidade); funcionario(Pessoa,Universidade)).

%questao 2
nota(joao,5.0).
nota(maria,6.0).
nota(joana,8.0).
nota(mariana,9.0).
nota(cleuza,8.5).
nota(jose,6.5).
nota(jaoquim,4.5).
nota(mara,4.0).
nota(mary,10.0).
/*Considerando que:
Nota de 7.0 a 10.0 = Aprovado
Nota de 5.0 a 6.9 = Recuperação
Nota de 0.0 a 4.9 = Reprovado
*/
situacao(Aluno):- (   (   nota(Aluno,Nota), Nota >= 7, write('Aprovado'));
    (   (nota(Aluno,Nota), Nota >= 5), (nota(Aluno,Nota), Nota =< 6.9), write('Recuperação'));
	(   nota(Aluno,Nota), Nota < 5, write('Reprovado'))).
	
%questao 3
remover(X, [X|L], L).
remover(X, [X1|L], [X1|L1]):- remover(X, L, L1), !.

%questao 4
iguais([], []).
iguais([X|T1], [Y|T2]):- X =:= Y, iguais(T1, T2).

%questao 5
% inverte a lista e compara se X é igual ao primeiro elemento da nova lista
append([], Lista, Lista). % concatenar listas
append([H|L1], L2, [H|L3]):- append(L1,L2,L3).

inverte([],[]).
inverte([H|T], L):- inverte(T, NovaLista), append(NovaLista, [H], L).

ultimo(L, X):- inverte(L, [H|_]), X =:= H.

